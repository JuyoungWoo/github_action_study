name: CI

on: # 다음 상황에서 jobs들이 실행됨
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
permissions:
  contents: read
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK 11
        uses: actions/setup-java@v3  #ubuntu에 jdk 설치
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build with maven
        run: ./mvnw clean package -Dtestskip # 빌드-> jar 파일 생성

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker
        run: docker build --platform -linux/amd64 -t ${{secrets.DOCKERHUB_USERNAME}}/server .

      - name: Push Docker
        run: docker push ${{secrets.DOCKERHUB_USERNAME}}/server:latest

  deploy:
  # needs: build => build 안에 있는 문장 블이 정상적으로 실행될 때 실행하겠다.
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set Target IP
      # -eq: equal -ne : not equal , -o: or , fi : if문 닫기
      # CURRENT_UPSTREAM이라는 새 변수
        run: |
          CURRENT_UPSTREAM=${curl -s "http://${{secrets.NGINX_IP }}/env")
          echo $CURRENT_UPSTREAM
          if [ $CURRENT_UPSTREAM -ne blue -o $CURRENT_UPSTREAM -ne green ]; then
            CURRENT_UPSTREAM=blue
          fi
        
          if [ $CURRENT_UPSTREAM -eq blue ]; then
            echo "CURRENT_IP=${{ secrets.BLUE_IP }}" >>  $GITHUB_ENV //env 쓰면 
            echo "STOPPED_IP=${{ secrets.GREEN_IP }}" >>  $GITHUB_ENV
            echo "TARGET_UPSTREAM=green" >>  $GITHUB_ENV
          elif [ $CURRENT_UPSTREAM -eq green ]; then
            echo "CURRENT_IP=${{ secrets.GREEN_IP }}" >>  $GITHUB_ENV
            echo "STOPPED_IP=${{ secrets.BLUE_IP }}" >>  $GITHUB_ENV
            echo "TARGET_UPSTREAM=blue" >>  $GITHUB_ENV
          else
            echo "error"
            exit 1
          fi
        
      - name: Docker Compose
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ env.STOPPED_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/server:letest
            docker-compose up -d
            
			- name: Check deploy server URL PORT 8080
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ env.STOPPED_IP }}:8080/env
          max-attempts: 3
          retry-delay: 10s
      - name: Check deploy server URL PORT 8081
        uses: jtalk/url-health-check-action@v3
        with:
          url: http://${{ env.STOPPED_IP }}:8081/env
          max-attempts: 3
          retry-delay: 10s

			- name: Change nginx upstream
				uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.NGINX_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            docker exec -i nginxserver bash -c 'echo "set \$server_env ${{ env.TARGET_UPSTREAM }}"; >> /etc/nginx/conf.d/server-env.inc && service nginx reload'
      
      - name: Stop current server
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.CURRENT_IP }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          script: |
            docker stop prod1
            docker stop prod2
            docker rm pro1
            docker rm pro2

            
